function [lines, bw] = findLetters(im)
% [lines, BW] = findLetters(im) processes the input RGB image and returns a cell
% array 'lines' of located characters in the image, as well as a binary
% representation of the input image. The cell array 'lines' should contain one
% matrix entry for each line of text that appears in the image. Each matrix entry
% should have size Lx4, where L represents the number of letters in that line.
% Each row of the matrix should contain 4 numbers [x1, y1, x2, y2] representing
% the top-left and bottom-right position of each box. The boxes in one line should
% be sorted by x1 value.

% test
im = imread('../images/02_letters.jpg');

% binarize the image with white background
im = rgb2gray(imgaussfilt(im, 3));
% imdiate(strel('disk', 5));
bw = imcomplement(imbinarize(im));
imgSize = size(bw);

% find connected components 
cc = bwconncomp(bw);
num = cc.NumObjects;
conns = cc.PixelIdxList;
offset = 5;

% % visualize the conns
% output = cell(num, 1);
% for i = 1:num
%     obj = cc.PixelIdxList{i};
%     temp = bw;
%     temp(obj) = 0;
%     
%     fileName = sprintf('cc%d.png', i);
%     imwrite(temp, fileName);
%     output{i} = fileName;
% end
% montage(output);

% locate each object
objects = zeros(num, 4); 
for i = 1:num
    % initialize corner coordinates 
    [x1, y1, x2, y2] = deal(imgSize(2), imgSize(1), 0, 0);
    for j = 1:length(conns{i})
        [I, J] = ind2sub(imgSize, conns{i}(j));
        x1 = min(x1, J);
        x2 = max(x1, J);
        y1 = min(y1, I);
        y2 = max(y2, I);
    end
    
    % add more space to the surroundings 
    [x1, y1] = deal(x1 - offset, y1 - offset);
    [x2, y2] = deal(x2 + offset, y2 + offset);
    objects(i, :) = [x1, y1, x2, y2];
%     imshow(bw(y1:y2, x1:x2));
end

% group into lines
lines = cell(num, 1);
used = zeros(num, 1);  

while 1
    [y1_min, ind] = min(objects(:, 2));
    y2_min = objects(ind, 4);
    imshow(bw(y1_min:y2_min, :));
    qualify = (objects(:,2) >= y1_min) & (objects(:,2) <= y2_min);
    if length(qualify) == 0
        break
    end
    
    % retrieve the row 
    row = objects(qualify, :);
    row = sortrows(row);
    
    for j = 1:length(row)
        obj = row(j, :);
        imshow(bw(obj(2):obj(4), obj(1):obj(3)));
        saveas(gcf, sprintf('%d%d.jpg', j));
    end 
    
    objects(qualify, :) = [0 0 0 0];
    
end 

% index = zeros(1, num);
% [lineIdx, target] = deal(1, 0);
% for i = 1:num
%     obj = objects(i, :);
%     if abs(y_min - obj(2)) < thres
%        index(lineIdx) = i;
%        lineIdx = lineIdx + 1;
%     end
% 
% end 
% index = index(index ~= 0);
% for i = 1:length(index)
%     obj = objects{i};
%     imshow(bw(obj(2):obj(4), obj(1):obj(3)));
% end


end
